# 1. Modify those variables for your project
substitutions:
  name: esphome-web-b1416d
  friendly_name: ESPHome Web b1416d
  static_ip: 192.168.1.2
  gateway: 192.168.1.1
  subnet: 255.255.255.0
  dns1: 192.168.1.1

# 2. General ESPHome configuration
esphome:
  name: ${name}
  friendly_name: ${name}

# esp32:
#   board: lolin_c3_mini
esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret ha_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${static_ip}
    gateway: ${gateway}
    subnet: ${subnet}
    dns1: ${dns1}
  # Turn off Wi-Fi when not needed
  power_save_mode: LIGHT
  # Directly connects to WiFi network without doing a full scan first
  fast_connect: True

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${name} Fallback Hotspot'
    password: !secret ota_password

captive_portal:

# 3. I/O and sensors configuration
i2c:
  sda: GPIO4 # D2
  scl: GPIO5 # D1
  scan: true

sensor:
  - platform: tsl2591
    name: "tsl2591"
    id: "tls2591"
    address: 0x29
    update_interval: 5m
    gain: auto
    device_factor: 53
    glass_attenuation_factor: 14.4
    visible:
      name: '${name}.visible_light'
    infrared:
      name: '${name}.infrared_light'
    full_spectrum:
      name: '${name}.full_spectrum_light'
    calculated_lux:
      id: i_lux
      name: '${name}.lux'
    actual_gain:
      id: "actual_gain"
      name: '${name}.actual_gain'
  
  - platform: bme680
    temperature:
      name: '${name}.temperature'
      oversampling: 16x
    pressure:
      name: '${name}.pressure'
    humidity:
      id: "humidity"
      name: '${name}.humidity'
    gas_resistance:
      id: "gas_resistance"
      name: '${name}.gas_resistance'
    address: 0x77
    update_interval: 5m
  - platform: template
    name: '${name}.indoor_air_quality'
    id: iaq
    icon: "mdi:gauge"
    # caulculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 *  id(humidity).state;

text_sensor:
  - platform: template
    name: '${name}.iaq_classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }
